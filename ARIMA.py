# -*- coding: utf-8 -*-
"""prediction_ARIMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DXqLWdmg26Qjo0aG8VLkf8CoA9U5ip_x
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# statmodels
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima_model import ARMA, ARIMA
# datetime
from datetime import datetime

from statsmodels.tsa.arima.model import ARIMA

import warnings
warnings.filterwarnings('ignore')

from google.colab import files
files.upload()

import pandas as pd
df = pd.read_csv('fullsdg_final2023_witoutmissing.csv')
df= df[df['Country'] == 'OECD members']
df = df[['year', 'SDG Index Score']]
df['year'] = pd.to_datetime(df['year'], format='%Y').dt.strftime('%Y-01-01')
df
#country_groups = df['Country'].unique()
#print(country_groups)

df['year'] = pd.to_datetime(df['year'])

# split the data into train and test
cut_off = datetime.strptime('2016-01-01','%Y-%m-%d')
train_df = df[df['year'] <= cut_off]
test_df = df[df['year'] >= cut_off]
# set the time as index
train_df.set_index('year',inplace=True)
test_df.set_index('year',inplace=True)

fig,ax = plt.subplots(figsize=(15,8))
train_df.plot(kind='line',ax=ax)
test_df.plot(kind='line',ax=ax)
plt.xlabel('month')
plt.ylabel('SDG Index Score')
plt.legend(['Train data','Test data'])
plt.show()

# visualize
fig,ax = plt.subplots(figsize=(15,8))
plt.plot(train_df['year'],train_df['SDG Index Score'])
plt.plot(test_df['year'],test_df['SDG Index Score'])
plt.xlabel('year')
plt.ylabel('SDG')
plt.legend(['Train data','Test data'])
plt.show()

from statsmodels.tsa.stattools import adfuller

adfuller(train_df['SDG Index Score'])

stationary_train_df=df[['year', 'SDG Index Score']]

stationary_train_df = train_df.diff() # difference
stationary_train_df.dropna(inplace=True) # drop the null values
stationary_train_df

fig,ax = plt.subplots(figsize=(15,8))
stationary_train_df['SDG Index Score'].plot(kind='line', ax=ax)

adfuller(stationary_train_df['SDG Index Score'])

fig,ax = plt.subplots(nrows=1,ncols=2,figsize=(15,8))

fig = plot_acf(stationary_train_df['SDG Index Score'],ax=ax[0])
fig = plot_pacf(stationary_train_df['SDG Index Score'],ax=ax[1])



import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 8))

# Plot autocorrelation function with modified line size
fig = plot_acf(stationary_train_df['SDG Index Score'], ax=ax[0])
ax[0].set_title('Autocorrelation Plot', fontsize=20)  # Set the size of the title

ax[0].tick_params(axis='both', which='major', labelsize=20)  # Set the size of x and y axis labels
ax[0].lines[0].set_linewidth(2)  # Set the size of the lines in the plot

# Plot partial autocorrelation function with modified line size
fig = plot_pacf(stationary_train_df['SDG Index Score'], ax=ax[1])
ax[1].set_title('Partial Autocorrelation Plot', fontsize=20)  # Set the size of the title

ax[1].tick_params(axis='both', which='major', labelsize=20)  # Set the size of x and y axis labels
ax[1].lines[0].set_linewidth(2)  # Set the size of the lines in the plot

# Change the size of the dots in the autocorrelation plot
for line in ax[0].lines:
    line.set_markersize(10)  # Adjust the marker size (10) as needed

# Change the size of the markers in the partial autocorrelation plot
for line in ax[1].lines:
    line.set_markersize(10)  # Adjust the marker size (10) as needed

# Save the plots
plt.savefig('acf_pacf_plots_Middle East and North Africa.png', dpi=800)  # Save the plots to a file
plt.show()
#plt.savefig('acf_pacf_plots.jpg', dpi=800)  # Save the plots to a file with quality 800

p,q = (1,6)
#model_arma = ARIMA(train_df['SDG Index Score'],order=(p,0,q)).fit()
model_arma = ARIMA(stationary_train_df['SDG Index Score'],order=(p,0,q)).fit()
print(model_arma.summary())



model_arma.aic # error

from sklearn.metrics import mean_squared_error

fitted_values = model_arma.fittedvalues





mse = mean_squared_error(stationary_train_df['SDG Index Score'],fitted_values)
print('mean square error =',mse)

fig,ax = plt.subplots(figsize=(8,4))
stationary_train_df['SDG Index Score'].plot(kind='line',ax=ax)
fitted_values.plot(kind='line',ax=ax)
plt.legend(['train','fitted values'])

train_df.iloc[-1]

start_date = '2016-01-01'
end_date = '2040-01-01'
prediction_values = model_arma.predict(start=start_date, end=end_date) # stationary in nature

#predict=model_arma.predict(start=pd.to_datetime('2013'), end=pd.to_datetime('2015') ,typ='levels')

intial_value =69
forecasted_values = intial_value + prediction_values.cumsum()
forecasted_values

fig,ax = plt.subplots(figsize=(15,8))
train_df.plot(kind='line',ax=ax,alpha=0.5)
test_df.plot(kind='line',ax=ax,alpha=0.5)


forecasted_values.plot(kind='line',ax=ax)
plt.xlabel('month')
plt.ylabel('no. of passenges')
plt.legend(['Train data','Test data','Forecated_values'])
plt.show()
train_df

df = pd.DataFrame({'forecast':

[64.5,
64.7,
64.8,
65.1,
65.5,
65.8,
66.1,
66.4,
66.7,
67.0,
67.3,
67.4,
67.7,
68.1,
68.6,
69.1,
68.7,
68.946164,
69.826695,
70.117815,
70.376240,
70.421953,
70.509358,
71.156498,
71.597737,
71.755818,
71.916291,
72.094402,
72.549212,
73.013046,
73.209768,
73.379084,
73.625960,
73.999010,
74.416187,
74.668557,
74.851985,
75.118385,
75.466143,
75.836534,
76.117725]



,


'years': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040]

                   })
df

years_list = list(range(2000, 2041))
print(years_list)

model_arima = ARIMA(stationary_train_df,order=(6,0,6)).fit()

start_date = '2016-01-01'
end_date = '2040-01-01'
predicted_value_arima = model_arima.predict(start=start_date,end=end_date) # stationary

train_df.iloc[-1]

forecasted_values_arima = 63.4+ np.cumsum(predicted_value_arima)

len(forecasted_values_arima)

confidence_interval = model_arima.forecast(steps=25)
confidence_interval

train_df = df[df["year"] < 2017].copy()
test_df = df[df["year"] >= 2017].copy()

upper_lmt = forecasted_values_arima + confidence_interval[:,1]
lower_lmt = forecasted_values_arima + confidence_interval[:,0]

'''
import pandas as pd
df2 = pd.read_csv('fullsdg_final2023_witoutmissing.csv')
df2  =df2.fillna(df2.mean())
df= df2[df2['Country'] == 'Norway']

df = df[['year', 'SDG Index Score']]
df['year'] = pd.to_datetime(df['year'], format='%Y').dt.strftime('%Y-01-01')

df'''

# visualize
fig,ax = plt.subplots(figsize=(15,8))
train_df.plot(kind='line',ax=ax,alpha=0.5)
test_df.plot(kind='line',ax=ax,alpha=0.5)


forecasted_values_arima.plot(kind='line',ax=ax)
plt.fill_between(test_df.index,lower_lmt,upper_lmt,color='k',alpha=0.2)

plt.xlabel('month')
plt.ylabel('no. of passenges')
plt.legend(['Train data','Test data','Forecated_values','Confidence Interval'])
plt.show()

!pip install pmdarima

from pmdarima import auto_arima

auto_model = auto_arima(stationary_train_df,start_p=6, d=0, start_q=6, max_p=12, max_d=2, max_q=12,
                        seasonal=False,stationary=True,trace=True,scoring ='mse')

#model_arima_best = ARIMA(stationary_train_df,(1,0,1)).fit()
model_arima_best = ARIMA(stationary_train_df, order=(1, 0, 0)).fit()
print(model_arima_best.summary())

# make prediction
#start_date = datetime.strptime('2017','%Y')
#end_date = datetime.strptime('2028','%Y')
start_date = '2016-01-01'
end_date = '2040-01-01'
prediction_arima_best = model_arima_best.predict(start_date,end_date)# stationary data

train_df.iloc[-1]

forecasted_values_arima_best =  76.2+ np.cumsum(prediction_arima_best)

# visualization
fig,ax = plt.subplots(figsize=(15,8))
train_df.plot(kind='line',ax=ax,alpha=0.8)
test_df.plot(kind='line',ax=ax,alpha=0.5)

# forcasting
forecasted_values_arima_best.plot(kind='line',ax=ax)
plt.ylabel('# of Passengers')
plt.legend(['Train','Test','Forecasted'])
plt.show()